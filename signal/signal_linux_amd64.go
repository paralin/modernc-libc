// Code generated by 'ccgo signal/gen.c -crt-import-path "" -export-defines "" -export-enums "" -export-externs X -nostdinc -nostdlib -export-fields F -export-structs "" -export-typedefs "" -header -hide _OSSwapInt16,_OSSwapInt32,_OSSwapInt64 -ignore-unsupported-alignment -o signal/signal_linux_amd64.go -pkgname signal -Imusl-fts/ -Imusl/arch/x86_64 -Imusl/arch/generic -Imusl/obj/src/internal -Imusl/src/include -Imusl/src/internal -Imusl/obj/include -Imusl/include', DO NOT EDIT.

package signal

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer

const (
	BUS_ADRALN         = 1          // signal.h:79:1:
	BUS_ADRERR         = 2          // signal.h:80:1:
	BUS_MCEERR_AO      = 5          // signal.h:83:1:
	BUS_MCEERR_AR      = 4          // signal.h:82:1:
	BUS_OBJERR         = 3          // signal.h:81:1:
	CLD_CONTINUED      = 6          // signal.h:90:1:
	CLD_DUMPED         = 3          // signal.h:87:1:
	CLD_EXITED         = 1          // signal.h:85:1:
	CLD_KILLED         = 2          // signal.h:86:1:
	CLD_STOPPED        = 5          // signal.h:89:1:
	CLD_TRAPPED        = 4          // signal.h:88:1:
	FEATURES_H         = 0          // features.h:2:1:
	FPE_FLTDIV         = 3          // signal.h:58:1:
	FPE_FLTINV         = 7          // signal.h:62:1:
	FPE_FLTOVF         = 4          // signal.h:59:1:
	FPE_FLTRES         = 6          // signal.h:61:1:
	FPE_FLTSUB         = 8          // signal.h:63:1:
	FPE_FLTUND         = 5          // signal.h:60:1:
	FPE_INTDIV         = 1          // signal.h:56:1:
	FPE_INTOVF         = 2          // signal.h:57:1:
	ILL_BADSTK         = 8          // signal.h:72:1:
	ILL_COPROC         = 7          // signal.h:71:1:
	ILL_ILLADR         = 3          // signal.h:67:1:
	ILL_ILLOPC         = 1          // signal.h:65:1:
	ILL_ILLOPN         = 2          // signal.h:66:1:
	ILL_ILLTRP         = 4          // signal.h:68:1:
	ILL_PRVOPC         = 5          // signal.h:69:1:
	ILL_PRVREG         = 6          // signal.h:70:1:
	MINSIGSTKSZ        = 2048       // signal.h:5:1:
	NSIG               = 65         // signal.h:250:1:
	POLL_ERR           = 4          // signal.h:240:1:
	POLL_HUP           = 6          // signal.h:242:1:
	POLL_IN            = 1          // signal.h:237:1:
	POLL_MSG           = 3          // signal.h:239:1:
	POLL_OUT           = 2          // signal.h:238:1:
	POLL_PRI           = 5          // signal.h:241:1:
	SA_NOCLDSTOP       = 1          // signal.h:106:1:
	SA_NOCLDWAIT       = 2          // signal.h:107:1:
	SA_NODEFER         = 0x40000000 // signal.h:111:1:
	SA_ONSTACK         = 0x08000000 // signal.h:109:1:
	SA_RESETHAND       = 0x80000000 // signal.h:112:1:
	SA_RESTART         = 0x10000000 // signal.h:110:1:
	SA_RESTORER        = 0x04000000 // signal.h:113:1:
	SA_SIGINFO         = 4          // signal.h:108:1:
	SEGV_ACCERR        = 2          // signal.h:75:1:
	SEGV_BNDERR        = 3          // signal.h:76:1:
	SEGV_MAPERR        = 1          // signal.h:74:1:
	SEGV_PKUERR        = 4          // signal.h:77:1:
	SIGABRT            = 6          // signal.h:122:1:
	SIGALRM            = 14         // signal.h:131:1:
	SIGBUS             = 7          // signal.h:124:1:
	SIGCHLD            = 17         // signal.h:134:1:
	SIGCONT            = 18         // signal.h:135:1:
	SIGEV_NONE         = 1          // signal.h:189:1:
	SIGEV_SIGNAL       = 0          // signal.h:188:1:
	SIGEV_THREAD       = 2          // signal.h:190:1:
	SIGFPE             = 8          // signal.h:125:1:
	SIGHUP             = 1          // signal.h:117:1:
	SIGILL             = 4          // signal.h:120:1:
	SIGINT             = 2          // signal.h:118:1:
	SIGIO              = 29         // signal.h:146:1:
	SIGIOT             = 6          // signal.h:123:1:
	SIGKILL            = 9          // signal.h:126:1:
	SIGNAL_H           = 0          // signal.h:2:1:
	SIGPIPE            = 13         // signal.h:130:1:
	SIGPOLL            = 29         // signal.h:147:1:
	SIGPROF            = 27         // signal.h:144:1:
	SIGPWR             = 30         // signal.h:148:1:
	SIGQUIT            = 3          // signal.h:119:1:
	SIGSEGV            = 11         // signal.h:128:1:
	SIGSTKFLT          = 16         // signal.h:133:1:
	SIGSTKSZ           = 8192       // signal.h:6:1:
	SIGSTOP            = 19         // signal.h:136:1:
	SIGSYS             = 31         // signal.h:149:1:
	SIGTERM            = 15         // signal.h:132:1:
	SIGTRAP            = 5          // signal.h:121:1:
	SIGTSTP            = 20         // signal.h:137:1:
	SIGTTIN            = 21         // signal.h:138:1:
	SIGTTOU            = 22         // signal.h:139:1:
	SIGUNUSED          = 31         // signal.h:150:1:
	SIGURG             = 23         // signal.h:140:1:
	SIGUSR1            = 10         // signal.h:127:1:
	SIGUSR2            = 12         // signal.h:129:1:
	SIGVTALRM          = 26         // signal.h:143:1:
	SIGWINCH           = 28         // signal.h:145:1:
	SIGXCPU            = 24         // signal.h:141:1:
	SIGXFSZ            = 25         // signal.h:142:1:
	SIG_BLOCK          = 0          // signal.h:30:1:
	SIG_SETMASK        = 2          // signal.h:32:1:
	SIG_UNBLOCK        = 1          // signal.h:31:1:
	SI_ASYNCIO         = -4         // signal.h:37:1:
	SI_ASYNCNL         = -60        // signal.h:34:1:
	SI_KERNEL          = 128        // signal.h:42:1:
	SI_MESGQ           = -3         // signal.h:38:1:
	SI_QUEUE           = -1         // signal.h:40:1:
	SI_SIGIO           = -5         // signal.h:36:1:
	SI_TIMER           = -2         // signal.h:39:1:
	SI_TKILL           = -6         // signal.h:35:1:
	SI_USER            = 0          // signal.h:41:1:
	SS_AUTODISARM      = 2147483648 // signal.h:245:1:
	SS_DISABLE         = 2          // signal.h:244:1:
	SS_FLAG_BITS       = 2147483648 // signal.h:246:1:
	SS_ONSTACK         = 1          // signal.h:243:1:
	TRAP_BRANCH        = 3          // signal.h:234:1:
	TRAP_BRKPT         = 1          // signal.h:232:1:
	TRAP_HWBKPT        = 4          // signal.h:235:1:
	TRAP_TRACE         = 2          // signal.h:233:1:
	TRAP_UNK           = 5          // signal.h:236:1:
	X_BSD_SOURCE       = 1          // features.h:15:1:
	X_FEATURES_H       = 0          // features.h:2:1:
	X_FILE_OFFSET_BITS = 64         // <builtin>:25:1:
	X_LP64             = 1          // <predefined>:312:1:
	X_NSIG             = 65         // signal.h:152:1:
	X_SIGNAL_H         = 0          // signal.h:2:1:
	X_STDC_PREDEF_H    = 1          // <predefined>:174:1:
	X_XOPEN_SOURCE     = 700        // features.h:16:1:
	Linux              = 1          // <predefined>:255:1:
	Unix               = 1          // <predefined>:191:1:
)

type Ptrdiff_t = int64 /* <builtin>:3:26 */

type Size_t = uint64 /* <builtin>:9:23 */

type Wchar_t = int32 /* <builtin>:15:24 */

type X__int128_t = struct {
	Flo int64
	Fhi int64
} /* <builtin>:21:43 */ // must match modernc.org/mathutil.Int128
type X__uint128_t = struct {
	Flo uint64
	Fhi uint64
} /* <builtin>:22:44 */ // must match modernc.org/mathutil.Int128

type X__builtin_va_list = uintptr /* <builtin>:46:14 */
type X__float128 = float64        /* <builtin>:47:21 */

type Time_t = int64 /* alltypes.h:85:16 */

type Clock_t = int64 /* alltypes.h:219:14 */

type Timespec = struct {
	Ftv_sec  Time_t
	Ftv_nsec int64
} /* alltypes.h:229:1 */

type Pid_t = int32 /* alltypes.h:235:13 */

type Uid_t = uint32 /* alltypes.h:245:18 */

type Pthread_t = uintptr /* alltypes.h:273:26 */

type X__sigset_t = struct{ F__bits [16]uint64 } /* alltypes.h:349:9 */

type Sigset_t = X__sigset_t /* alltypes.h:349:71 */

type Pthread_attr_t = struct {
	F__u struct {
		F__ccgo_pad1 [0]uint64
		F__i         [14]int32
	}
} /* alltypes.h:372:147 */

type Sigaltstack = struct {
	Fss_sp       uintptr
	Fss_flags    int32
	F__ccgo_pad1 [4]byte
	Fss_size     Size_t
} /* signal.h:44:9 */

type Stack_t = Sigaltstack /* signal.h:44:28 */

type Greg_t = int64        /* signal.h:59:19 */
type Gregset_t = [23]int64 /* signal.h:59:27 */
type X_fpstate = struct {
	Fcwd       uint16
	Fswd       uint16
	Fftw       uint16
	Ffop       uint16
	Frip       uint64
	Frdp       uint64
	Fmxcsr     uint32
	Fmxcr_mask uint32
	F_st       [8]struct {
		Fsignificand [4]uint16
		Fexponent    uint16
		Fpadding     [3]uint16
	}
	F_xmm    [16]struct{ Felement [4]uint32 }
	Fpadding [24]uint32
} /* signal.h:60:9 */

type Fpregset_t = uintptr /* signal.h:71:3 */
type Sigcontext = struct {
	Fr8          uint64
	Fr9          uint64
	Fr10         uint64
	Fr11         uint64
	Fr12         uint64
	Fr13         uint64
	Fr14         uint64
	Fr15         uint64
	Frdi         uint64
	Frsi         uint64
	Frbp         uint64
	Frbx         uint64
	Frdx         uint64
	Frax         uint64
	Frcx         uint64
	Frsp         uint64
	Frip         uint64
	Feflags      uint64
	Fcs          uint16
	Fgs          uint16
	Ffs          uint16
	F__pad0      uint16
	Ferr         uint64
	Ftrapno      uint64
	Foldmask     uint64
	Fcr2         uint64
	Ffpstate     uintptr
	F__reserved1 [8]uint64
} /* signal.h:72:1 */

type Mcontext_t = struct {
	Fgregs       Gregset_t
	Ffpregs      Fpregset_t
	F__reserved1 [8]uint64
} /* signal.h:84:3 */

type X__ucontext = struct {
	Fuc_flags     uint64
	Fuc_link      uintptr
	Fuc_stack     Stack_t
	Fuc_mcontext  Mcontext_t
	Fuc_sigmask   Sigset_t
	F__fpregs_mem [64]uint64
} /* signal.h:97:9 */

type Ucontext_t = X__ucontext /* signal.h:104:3 */

type Sigval = struct {
	F__ccgo_pad1 [0]uint64
	Fsival_int   int32
	F__ccgo_pad2 [4]byte
} /* signal.h:92:1 */

type Siginfo_t = struct {
	Fsi_signo    int32
	Fsi_errno    int32
	Fsi_code     int32
	F__ccgo_pad1 [4]byte
	F__si_fields struct {
		F__ccgo_pad1 [0]uint64
		F__pad       [112]int8
	}
} /* signal.h:145:3 */

type Sigaction = struct {
	F__sa_handler struct{ Fsa_handler uintptr }
	Fsa_mask      Sigset_t
	Fsa_flags     int32
	F__ccgo_pad1  [4]byte
	Fsa_restorer  uintptr
} /* signal.h:167:1 */

type Sigevent = struct {
	Fsigev_value struct {
		F__ccgo_pad1 [0]uint64
		Fsival_int   int32
		F__ccgo_pad2 [4]byte
	}
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr
	Fsigev_notify_attributes uintptr
	F__pad                   [32]int8
} /* signal.h:179:1 */

type Sig_t = uintptr /* signal.h:251:14 */

type Sig_atomic_t = int32 /* signal.h:269:13 */

var _ int8 /* gen.c:2:13: */
